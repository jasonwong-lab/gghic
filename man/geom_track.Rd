% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-track.R
\name{geom_track}
\alias{geom_track}
\title{geom_track}
\usage{
geom_track(
  mapping = NULL,
  data = NULL,
  stat = StatTrack,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...,
  data_paths = NULL,
  data_granges = NULL,
  width_ratio = 1/20,
  spacing_ratio = 0.5,
  data_range = c("auto", "maximum"),
  fill = "black",
  fontsize = 5,
  rasterize = FALSE,
  dpi = 300,
  dev = "cairo",
  scale = 1,
  draw_boundary = TRUE,
  boundary_colour = "black",
  linetype = "dashed"
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Parameters to be ignored.}

\item{data_paths}{The paths to the sequencing data files. Default is \code{NULL}.}

\item{data_granges}{The GRanges object of the sequencing data.
Default is \code{NULL}.}

\item{width_ratio}{The ratio of the width of each track relative to the
height of the Hi-C plot. Default is \code{1/20}.}

\item{spacing_ratio}{The ratio of the spacing between two tracks.
Default is \code{0.5}.}

\item{data_range}{The range of the x axis. It can be \code{"auto"}, \code{"maximum"},
or a number (vector). Default is \code{"auto"}.}

\item{fill}{The fill color of the track. Default is \code{"black"}.}

\item{fontsize}{The font size of the track names. Default is \code{5}.}

\item{rasterize}{Whether to rasterize the plot or not. Default is \code{FALSE}.}

\item{dpi}{The resolution of the rasterised plot. Default is \code{300}.}

\item{dev}{The device to rasterise the plot. Default is \code{"cairo"}.}

\item{scale}{The scale of the rasterised plot. Default is \code{1}.}

\item{draw_boundary}{Whether to draw the boundary line or not when plotting
multiple chromosomes. Default is \code{TRUE}.}

\item{boundary_colour}{The color of the boundary line. Default is \code{"black"}.}

\item{linetype}{The line type of the boundary line. Default is \code{"dashed"}.}
}
\value{
A ggplot object.
}
\description{
A ggplot2 geom for sequencing data tracks.
}
\details{
Requires the following aesthetics:
\itemize{
\item seqnames1
\item start1
\item end1
\item seqnames2
\item start2
\item end2
}
}
\examples{
\dontrun{
library(gghic)
library(ggplot2)
library(dplyr)
library(HiCExperiment)
library(InteractionSet)
library(scales)
library(glue)
library(rappdirs)

dir_cache_gghic <- user_cache_dir(appname = "gghic")
url_file <- paste0(
  "https://raw.githubusercontent.com/mhjiang97/gghic-data/refs/heads/",
  "master/cooler/chr4_11-5kb.cool"
)
path_file <- file.path(dir_cache_gghic, "chr4_11-5kb.cool")
download.file(url_file, path_file)

hic <- path_file |>
  CoolFile() |>
  import()

gis <- interactions(hic)
gis$score <- log10(gis$balanced)
x <- as_tibble(gis)
scores <- x$score[pairdist(gis) != 0 & !is.na(pairdist(gis) != 0)]
scores <- scores[!is.na(scores) & !is.infinite(scores)]
x$score <- oob_squish(x$score, c(min(scores), max(scores)))

p <- x |>
  filter(
    center1 > 10000000 & center1 < 11000000 &
      center2 > 10000000 & center2 < 11000000
  ) |>
  gghic(
    draw_boundary = TRUE,

    ideogram = TRUE, genome = "hg19", highlight = TRUE,
    ideogram_fontsize = 7, ideogram_width_ratio = 0.08,

    annotation = TRUE, include_ncrna = FALSE, gtf_path = path_gtf,
    style = "arrow", maxgap = 100000, annotation_fontsize = 5,
    annotation_width_ratio = 0.05,

    expand_xaxis = TRUE
  )

urls_file <- glue(
  "https://raw.githubusercontent.com/",
  "mhjiang97/gghic-data/refs/heads/master/bigwig/track{1:2}.bigWig"
)
paths_track <- glue("{dir_cache_gghic}/track{1:2}.bigWig")
for (i in seq_along(urls_file)) {
  download.file(urls_file[i], paths_track[i])
}

p + geom_track(
  data_paths = paths_track, width_ratio = 0.5,
  fill = c("#DC0000B2", "#00A087B2"), data_range = "auto"
)
}
}
